coordinate_frames {
  root_frame = "local";

  
  
  # this is the pelvis link, its a legacy that its referred to as body
  body {
    relative_to = "local";
    history = 2000;
    max_frequency = 1000;
    pose_update_channel = "POSE_BODY";
    #update_channel = "HEAD_TO_BODY";  
    initial_transform{
      translation = [ 0, 0, 0 ];
      rpy = [0, 0, 0];
    }
  }


  head {
    relative_to = "body";
    history = 2000;
    max_frequency = 100;
    #pose_update_channel= "POSE_HEAD";
    update_channel = "BODY_TO_HEAD";  
    initial_transform{
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  }  


  # this is a floating body frame disconnected from the rest of the tree
  # [[[[[[ it only exists as a convenience ]]]]
  # it also not directly connected to "bdi". modulo update rates:
  # POSE_BDI =    POSE_BODY * BODY_TO_BDI
  body_bdi {
    relative_to = "local";
    history = 2000;
    max_frequency = 100;
    pose_update_channel= "POSE_BDI";
    initial_transform{
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  }

  # this is the transform between BDI coordinate system and MIT's frame
  # frame_in_bdi_system = bdi * frame_in_mit_system
  local_bdi {
    relative_to = "local";
    history = 2000;
    max_frequency = 100;
    update_channel= "LOCAL_TO_LOCAL_BDI";
    initial_transform{
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  }
    
  
  # An alternative body frame, for comparison with POSE_BODY
  # when developing state estimation
  body_alt {
    # this cannot change - its rigid
    relative_to = "local";
    history = 2000;
    max_frequency = 100;
    pose_update_channel= "POSE_BODY_ALT";
    initial_transform{
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  }   

  # An alternative body frame, for comparison with CAMERA_LEFT
  # when developing state estimation
  CAMERA_LEFT_ALT {
    # this cannot change - its rigid
    relative_to = "local";
    history = 2000;
    max_frequency = 100;
    pose_update_channel= "POSE_CAMERA_LEFT_ALT";
    initial_transform{
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  }   
  
  # Pose as published by Vicon
  # for a short time was VICON_BODY
  frontplate_vicon {
    relative_to = "local";
    history = 2000;
    update_channel= "VICON_FRONTPLATE";
    initial_transform{
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  } 
  
  # Transform between marker frame and body
  # (eventually) known fixed transform
  body_vicon {
    relative_to = "frontplate_vicon";
    history = 2000;
    update_channel= "BODY_TO_FRONTPLATE_VICON";
    initial_transform{
      # Original Guessimates by mfallon
      #translation=[  0.0 , -0.2 , 0.0 ];
      #rpy = [4.0 , 10.0 , 110.0 ];
      
      # original tf from Matt - actually FRONTPLATE_VICON to BODY
      #trans = [0.167358196826787, 0.00311776304136496, 0.0585324012135696];
      #quat = [0.606055004820709, 0.0496525684836397, -0.0756283947073843, -0.790260905960008];
      
      # optimized by Matt Antone 25 Jan 2014
      #translation= [0.0458, -0.1688, -0.0293];
      #quat= [0.606055, -0.0496526, 0.0756284, 0.7902609] ;

      # optimized for new vsk files by A. Valenzuela 21 Mar 2014
      translation = [-0.145443, -0.115932, -0.055009];
      quat = [0.941832, 0.025487, 0.022232, 0.334378];
    }
  } 
  
  
  # pose used by state estimation metrics
  pose_vicon {
    relative_to = "local";
    history = 2000;
    max_frequency = 5;
    pose_update_channel= "POSE_VICON";
    initial_transform{
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  }

  # corresponds to pelvisRearImu which was actually moved to
  imu {
    relative_to = "body";
    history = 2000;
    #update_channel = "BODY_TO_IMU";  
    initial_transform{
      translation = [-0.075844901, 0.0, -0.111056426];
      rpy = [-180, 27.29, -180];
      
      #translation = [ 0.03, 0.065, -0.083 ];
      #rpy = [0, -90.0, 0.0];
    }
  }  

  # faked imu moved at pelvis frame for IHMC simulator in early April 2015:
  #imu {
  #  relative_to = "body";
  #  history = 2000;
  #  #update_channel = "BODY_TO_IMU";  
  #  initial_transform{
  #    translation = [ 0.0, 0.0, 0.0 ];
  #    rpy = [0,0,0];
  #  }
  #} 

  utorso {
    relative_to = "body";
    history = 2000;
    max_frequency = 5;    
    update_channel = "BODY_TO_UTORSO";  
    initial_transform{
      translation = [ 0, 0, 0 ];
      quat = [ 1, 0, 0, 0 ];
    }
  }

  LHAND_FORCE_TORQUE {
    relative_to = "body";
    history = 5000;
    max_frequency = 50;

    update_channel = "BODY_TO_LHAND_FORCE_TORQUE";
    initial_transform{ # initial transform is useless as it always changes
      translation = [ 0.0, 0.0, 0.0];
      rpy = [ 0.0, 0.0, 0.0]; 
    }
  }

  RHAND_FORCE_TORQUE {
    relative_to = "body";
    history = 5000;
    max_frequency = 50;

    update_channel = "BODY_TO_RHAND_FORCE_TORQUE";
    initial_transform{ # initial transform is useless as it always changes
      translation = [ 0.0, 0.0, 0.0];
      rpy = [ 0.0, 0.0, 0.0]; 
    }
  }


  # Show what the ground height infered from the feet height is
  # This is used by maps
  ground {
    relative_to = "local";
    history = 2000;
    max_frequency = 5;
    pose_update_channel= "POSE_GROUND";
    initial_transform{
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  }

  CAMERACHEST_LEFT {
    # position estimated by eye, not accurate
    relative_to = "utorso";
    history = 5000;
    update_channel = "UTORSO_TO_CAMERACHEST_LEFT_OPTICAL_FRAME";  
    initial_transform{
      # calibrated to head camera by Matt A. 2013-12-03, no translation
      #translation = [0.216409, -0.121799, 0.406759];
      #rpy = [-85.465012, 0.840432, -13.015107];

      # calibrated to head camera by Matt A. 2015-02-20, full
      translation = [0.170000, 0.080000, 0.760000];
      rpy = [-89.373336, 3.150402, -13.567189];
      #translation = [0.160822, 0.095437, 0.763896];
      #rpy = [-89.331792, 3.183854, -13.964528];

      # mapped over from the URDF (oct 2013)
      #translation = [ 0.216409, 0.121799, 0.406759 ];
      #rpy = [ -90.0, 0.0, -15.0];
      # Original Manually done:
      #translation = [ 0.175, 0.09, 0.4 ];
      #rpy = [ -90.0, 0.0, -15.0];      
    }
  }

  CAMERACHEST_RIGHT {
    # position estimated by eye, not accurate
    relative_to = "utorso";
    history = 5000;
    update_channel = "UTORSO_TO_CAMERACHEST_RIGHT_OPTICAL_FRAME";  
    initial_transform{
      # calibrated to head camera by Matt A. 2013-12-03, no translation
      #translation = [0.216409, 0.121799, 0.406759];
      #rpy = [-88.084805, 0.425035, -164.778553];

      # calibrated to head camera by Matt A. 2015-02-20, full
      translation = [0.170000, -0.080000, 0.760000];
      rpy = [-91.402895, -2.449124, -165.054455];
      #translation = [0.181878, -0.086514, 0.803322];
      #rpy = [-91.654415, -3.274733, -164.996079];

      # mapped over from the URDF (oct 2013)
      #translation = [ 0.216409, -0.121799, 0.406759 ];
      #rpy = [ -90.0, 0.0, -165.0];
      # Original Manually done:    
      #translation = [ 0.175, -0.09, 0.4 ];
      #rpy = [ -90.0, 0.0, -165.0];
    }
  }

  CAMERAREAR {
    # position estimated by eye, not accurate
    relative_to = "utorso";
    history = 5000;
    update_channel = "UTORSO_TO_CAMERAREAR_RIGHT_OPTICAL_FRAME";  
    initial_transform{
      translation = [ -0.05, -0.0, 0.6 ];
      rpy = [ -90.0, 0.0, 90.0];      
    }
  }

  # guess at raspberry pi camera pose via sproulx's cad
  CAMERALHAND {
    relative_to = "LHAND_FORCE_TORQUE";
    history = 5000;
    update_channel = "LHAND_FORCE_TORQUE_TO_CAMERALHAND_OPTICAL_FRAME";
    initial_transform {
      translation = [ 0, 0.12, -0.001 ];
      rpy = [ -90, 0, 0  ];
    }
  }

  # TODO: this camera does not yet exist
  CAMERARHAND {
    relative_to = "RHAND_FORCE_TORQUE";
    history = 5000;
    update_channel = "RHAND_FORCE_TORQUE_TO_CAMERARHAND_OPTICAL_FRAME";
    initial_transform {
      translation = [ 0, 0.12, -0.001 ];
      rpy = [ -90, 0, 0 ];
    }
  }

}




cameras {
  WEBCAM {
    # Logtech webcam, coord_frame chosen for convenience
    lcm_channel = "WEBCAM";
    coord_frame = "CAMERA_LEFT";
    intrinsic_cal{
      width = 640;
      height= 480;
      distortion_model = "plumb-bob";
      distortion_k = [0,0,0];
      distortion_p = [ 0,0];
      pinhole = [  257.5196,   257.5196, 0, 320.5, 240.5];
    }      
  }

  CAMERACHEST_LEFT {
    # SA Camera, fish eye calibrated by Matt A. on 2015-02-20
    lcm_channel = "CAMERACHEST_LEFT";
    coord_frame = "CAMERACHEST_LEFT";
    intrinsic_cal{
      width = 1024;
      height= 1280;
      distortion_model = "angular-poly";
      distortion_coeffs = [ 0.364455125224955, 0.0259400054464941, 0.227713041272306 ];
      pinhole = [ 293.791104447152, 293.791104447152, 0, 499.226811745678, 646.005454910593 ];
    }      
  }

  # sample "virtual" image that can be created using drc-image-warp
  CAMERACHEST_LEFT_WARP {
    lcm_channel = "CAMERACHEST_LEFT_WARP";
    coord_frame = "CAMERACHEST_LEFT_WARP";
    intrinsic_cal {
      width = 640;
      height= 480;
      distortion_model = "null";
      pinhole = [ 200, 200, 0, 320, 240 ];
    }      
  }

  CAMERACHEST_RIGHT {
    # SA Camera, fish eye calibrated by Matt A. on 2015-02-20
    lcm_channel = "CAMERACHEST_RIGHT";
    coord_frame = "CAMERACHEST_RIGHT";
    intrinsic_cal{
      width = 1024;
      height= 1280;
      distortion_model = "angular-poly";
      distortion_coeffs = [ 0.382931453355394, -0.0353360363772571, 0.296184482367706 ];
      pinhole = [ 295.184347262234, 295.184347262234, 0, 496.108534843804, 633.343000558226 ];
    }      
  }

  # sample "virtual" image that can be created using drc-image-warp
  CAMERACHEST_RIGHT_WARP {
    lcm_channel = "CAMERACHEST_RIGHT_WARP";
    coord_frame = "CAMERACHEST_RIGHT_WARP";
    intrinsic_cal {
      width = 640;
      height= 480;
      distortion_model = "null";
      pinhole = [ 200, 200, 0, 320, 240 ];
    }      
  }

  CAMERAREAR {
    # Rear facing DLink Webcam, not calibrated
    lcm_channel = "CAMERAREAR";
    coord_frame = "CAMERAREAR";
    intrinsic_cal{
      width = 640;
      height= 480;
      distortion_model = "plumb-bob";
      distortion_k = [0,0,0];
      distortion_p = [ 0,0];
      pinhole = [  257.5196,   257.5196, 0, 320.5, 240.5];
    }      
  } 
   
  CAMERALHAND {
    lcm_channel = "CAMERALHAND";
    coord_frame = "CAMERALHAND";
    intrinsic_cal{
      width = 640;
      height= 480;
      
      # calibration recovered by m antone for raspberry pi camera
      # 2014-10-15
      distortion_model = "null";
      pinhole = [ 584.242693607066, 584.242693607066, 0, 287.963937445828, 248.986673719557 ];
    }
  }
    
  # TODO: this camera does not yet exist
  CAMERARHAND {
    lcm_channel = "CAMERARHAND";
    coord_frame = "CAMERARHAND";
    intrinsic_cal{
      width = 640;
      height= 480;
      
      distortion_model = "null";
      pinhole = [ 584.242693607066, 584.242693607066, 0, 287.963937445828, 248.986673719557 ];
    }
  }

  # "virtual" image of CAMERARHAND using drc-image-warp
  CAMERARHAND_WARP {
    lcm_channel = "CAMERARHAND_WARP";
    coord_frame = "CAMERARHAND_WARP";
    intrinsic_cal {
      width = 1280;
      height= 1024;
      distortion_model = "null";
      #pinhole = [ 200, 200, 0, 320, 240 ];
      pinhole = [  546.479165547316, 546.479165547316, 0, 647.510583175409, 526.704741246769];   
    }      
  }

  # "virtual" image of CAMERARHAND using drc-image-warp
  CAMERALHAND_WARP {
    lcm_channel = "CAMERALHAND_WARP";
    coord_frame = "CAMERALHAND_WARP";
    intrinsic_cal {
      width = 1280;
      height= 1024;
      distortion_model = "null";
      #pinhole = [ 200, 200, 0, 320, 240 ];
      pinhole = [  546.479165547316, 546.479165547316, 0, 647.510583175409, 526.704741246769];   

    }         
  }
}
